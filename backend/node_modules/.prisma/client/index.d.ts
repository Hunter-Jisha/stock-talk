
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  username: string
  email: string
  password: string
}

/**
 * Model Session
 * 
 */
export type Session = {
  id: string
  userId: string
}

/**
 * Model Strategy
 * 
 */
export type Strategy = {
  id: number
  name: string
  ownerId: string
}

/**
 * Model Transaction
 * 
 */
export type Transaction = {
  id: number
  stockId: string
  percent: number
  buyDateTime: Date
  sellDateTime: Date
  strategyId: number
  buyPrice: number | null
  sellPrice: number | null
}

/**
 * Model Stock
 * 
 */
export type Stock = {
  ticker: string
  currentPrice: number
}

/**
 * Model PricePoint
 * 
 */
export type PricePoint = {
  price: number
  dateTime: number
  stockId: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject>;

  /**
   * `prisma.strategy`: Exposes CRUD operations for the **Strategy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Strategies
    * const strategies = await prisma.strategy.findMany()
    * ```
    */
  get strategy(): Prisma.StrategyDelegate<GlobalReject>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<GlobalReject>;

  /**
   * `prisma.stock`: Exposes CRUD operations for the **Stock** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stocks
    * const stocks = await prisma.stock.findMany()
    * ```
    */
  get stock(): Prisma.StockDelegate<GlobalReject>;

  /**
   * `prisma.pricePoint`: Exposes CRUD operations for the **PricePoint** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PricePoints
    * const pricePoints = await prisma.pricePoint.findMany()
    * ```
    */
  get pricePoint(): Prisma.PricePointDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.3.1
   * Query Engine version: c875e43600dfe042452e0b868f7a48b817b9640b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Session: 'Session',
    Strategy: 'Strategy',
    Transaction: 'Transaction',
    Stock: 'Stock',
    PricePoint: 'PricePoint'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    sessions: number
    strategies: number
  }

  export type UserCountOutputTypeSelect = {
    sessions?: boolean
    strategies?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type StrategyCountOutputType
   */


  export type StrategyCountOutputType = {
    transactions: number
  }

  export type StrategyCountOutputTypeSelect = {
    transactions?: boolean
  }

  export type StrategyCountOutputTypeGetPayload<
    S extends boolean | null | undefined | StrategyCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? StrategyCountOutputType
    : S extends undefined
    ? never
    : S extends StrategyCountOutputTypeArgs
    ?'include' extends U
    ? StrategyCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof StrategyCountOutputType ? StrategyCountOutputType[P] : never
  } 
    : StrategyCountOutputType
  : StrategyCountOutputType




  // Custom InputTypes

  /**
   * StrategyCountOutputType without action
   */
  export type StrategyCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the StrategyCountOutputType
     * 
    **/
    select?: StrategyCountOutputTypeSelect | null
  }



  /**
   * Count Type StockCountOutputType
   */


  export type StockCountOutputType = {
    transactions: number
    pricePoints: number
  }

  export type StockCountOutputTypeSelect = {
    transactions?: boolean
    pricePoints?: boolean
  }

  export type StockCountOutputTypeGetPayload<
    S extends boolean | null | undefined | StockCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? StockCountOutputType
    : S extends undefined
    ? never
    : S extends StockCountOutputTypeArgs
    ?'include' extends U
    ? StockCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof StockCountOutputType ? StockCountOutputType[P] : never
  } 
    : StockCountOutputType
  : StockCountOutputType




  // Custom InputTypes

  /**
   * StockCountOutputType without action
   */
  export type StockCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the StockCountOutputType
     * 
    **/
    select?: StockCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    username: string | null
    email: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    username: string | null
    email: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    username: number
    email: number
    password: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    username?: true
    email?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    username?: true
    email?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    username?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    username: string
    email: string
    password: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    username?: boolean
    email?: boolean
    password?: boolean
    sessions?: boolean | SessionFindManyArgs
    strategies?: boolean | StrategyFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    sessions?: boolean | SessionFindManyArgs
    strategies?: boolean | StrategyFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'sessions' ? Array < SessionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'strategies' ? Array < StrategyGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'sessions' ? Array < SessionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'strategies' ? Array < StrategyGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `username`
     * const userWithUsernameOnly = await prisma.user.findMany({ select: { username: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sessions<T extends SessionFindManyArgs = {}>(args?: Subset<T, SessionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Session>>, PrismaPromise<Array<SessionGetPayload<T>>>>;

    strategies<T extends StrategyFindManyArgs = {}>(args?: Subset<T, StrategyFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Strategy>>, PrismaPromise<Array<StrategyGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    userId: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    userId?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which Session to aggregate.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: Array<SessionScalarFieldEnum>
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: string
    userId: string
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect = {
    id?: boolean
    user?: boolean | UserArgs
    userId?: boolean
  }

  export type SessionInclude = {
    user?: boolean | UserArgs
  }

  export type SessionGetPayload<
    S extends boolean | null | undefined | SessionArgs,
    U = keyof S
      > = S extends true
        ? Session
    : S extends undefined
    ? never
    : S extends SessionArgs | SessionFindManyArgs
    ?'include' extends U
    ? Session  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Session ? Session[P] : never
  } 
    : Session
  : Session


  type SessionCountArgs = Merge<
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }
  >

  export interface SessionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>> : CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>> : CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs>(
      args?: SelectSubset<T, SessionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Session>>, PrismaPromise<Array<SessionGetPayload<T>>>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs>(
      args: SelectSubset<T, SessionCreateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs>(
      args?: SelectSubset<T, SessionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs>(
      args: SelectSubset<T, SessionDeleteArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs>(
      args: SelectSubset<T, SessionUpdateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: SelectSubset<T, SessionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs>(
      args: SelectSubset<T, SessionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs>(
      args: SelectSubset<T, SessionUpsertArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Find one Session that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Find the first Session that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Session base type for findUnique actions
   */
  export type SessionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     * 
    **/
    where: SessionWhereUniqueInput
  }

  /**
   * Session: findUnique
   */
  export interface SessionFindUniqueArgs extends SessionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session base type for findFirst actions
   */
  export type SessionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter, which Session to fetch.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     * 
    **/
    distinct?: Enumerable<SessionScalarFieldEnum>
  }

  /**
   * Session: findFirst
   */
  export interface SessionFindFirstArgs extends SessionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Session findMany
   */
  export type SessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter, which Sessions to fetch.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The data needed to create a Session.
     * 
    **/
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs = {
    /**
     * The data used to create many Sessions.
     * 
    **/
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The data needed to update a Session.
     * 
    **/
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs = {
    /**
     * The data used to update Sessions.
     * 
    **/
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     * 
    **/
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The filter to search for the Session to update in case it exists.
     * 
    **/
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     * 
    **/
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter which Session to delete.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs = {
    /**
     * Filter which Sessions to delete
     * 
    **/
    where?: SessionWhereInput
  }


  /**
   * Session: findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs = SessionFindUniqueArgsBase
      

  /**
   * Session: findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs = SessionFindFirstArgsBase
      

  /**
   * Session without action
   */
  export type SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
  }



  /**
   * Model Strategy
   */


  export type AggregateStrategy = {
    _count: StrategyCountAggregateOutputType | null
    _avg: StrategyAvgAggregateOutputType | null
    _sum: StrategySumAggregateOutputType | null
    _min: StrategyMinAggregateOutputType | null
    _max: StrategyMaxAggregateOutputType | null
  }

  export type StrategyAvgAggregateOutputType = {
    id: number | null
  }

  export type StrategySumAggregateOutputType = {
    id: number | null
  }

  export type StrategyMinAggregateOutputType = {
    id: number | null
    name: string | null
    ownerId: string | null
  }

  export type StrategyMaxAggregateOutputType = {
    id: number | null
    name: string | null
    ownerId: string | null
  }

  export type StrategyCountAggregateOutputType = {
    id: number
    name: number
    ownerId: number
    _all: number
  }


  export type StrategyAvgAggregateInputType = {
    id?: true
  }

  export type StrategySumAggregateInputType = {
    id?: true
  }

  export type StrategyMinAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
  }

  export type StrategyMaxAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
  }

  export type StrategyCountAggregateInputType = {
    id?: true
    name?: true
    ownerId?: true
    _all?: true
  }

  export type StrategyAggregateArgs = {
    /**
     * Filter which Strategy to aggregate.
     * 
    **/
    where?: StrategyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Strategies to fetch.
     * 
    **/
    orderBy?: Enumerable<StrategyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StrategyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Strategies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Strategies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Strategies
    **/
    _count?: true | StrategyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StrategyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StrategySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StrategyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StrategyMaxAggregateInputType
  }

  export type GetStrategyAggregateType<T extends StrategyAggregateArgs> = {
        [P in keyof T & keyof AggregateStrategy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStrategy[P]>
      : GetScalarType<T[P], AggregateStrategy[P]>
  }




  export type StrategyGroupByArgs = {
    where?: StrategyWhereInput
    orderBy?: Enumerable<StrategyOrderByWithAggregationInput>
    by: Array<StrategyScalarFieldEnum>
    having?: StrategyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StrategyCountAggregateInputType | true
    _avg?: StrategyAvgAggregateInputType
    _sum?: StrategySumAggregateInputType
    _min?: StrategyMinAggregateInputType
    _max?: StrategyMaxAggregateInputType
  }


  export type StrategyGroupByOutputType = {
    id: number
    name: string
    ownerId: string
    _count: StrategyCountAggregateOutputType | null
    _avg: StrategyAvgAggregateOutputType | null
    _sum: StrategySumAggregateOutputType | null
    _min: StrategyMinAggregateOutputType | null
    _max: StrategyMaxAggregateOutputType | null
  }

  type GetStrategyGroupByPayload<T extends StrategyGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StrategyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StrategyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StrategyGroupByOutputType[P]>
            : GetScalarType<T[P], StrategyGroupByOutputType[P]>
        }
      >
    >


  export type StrategySelect = {
    id?: boolean
    name?: boolean
    owner?: boolean | UserArgs
    ownerId?: boolean
    transactions?: boolean | TransactionFindManyArgs
    _count?: boolean | StrategyCountOutputTypeArgs
  }

  export type StrategyInclude = {
    owner?: boolean | UserArgs
    transactions?: boolean | TransactionFindManyArgs
    _count?: boolean | StrategyCountOutputTypeArgs
  }

  export type StrategyGetPayload<
    S extends boolean | null | undefined | StrategyArgs,
    U = keyof S
      > = S extends true
        ? Strategy
    : S extends undefined
    ? never
    : S extends StrategyArgs | StrategyFindManyArgs
    ?'include' extends U
    ? Strategy  & {
    [P in TrueKeys<S['include']>]:
        P extends 'owner' ? UserGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'transactions' ? Array < TransactionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? StrategyCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'owner' ? UserGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'transactions' ? Array < TransactionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? StrategyCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Strategy ? Strategy[P] : never
  } 
    : Strategy
  : Strategy


  type StrategyCountArgs = Merge<
    Omit<StrategyFindManyArgs, 'select' | 'include'> & {
      select?: StrategyCountAggregateInputType | true
    }
  >

  export interface StrategyDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Strategy that matches the filter.
     * @param {StrategyFindUniqueArgs} args - Arguments to find a Strategy
     * @example
     * // Get one Strategy
     * const strategy = await prisma.strategy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StrategyFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StrategyFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Strategy'> extends True ? CheckSelect<T, Prisma__StrategyClient<Strategy>, Prisma__StrategyClient<StrategyGetPayload<T>>> : CheckSelect<T, Prisma__StrategyClient<Strategy | null >, Prisma__StrategyClient<StrategyGetPayload<T> | null >>

    /**
     * Find the first Strategy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyFindFirstArgs} args - Arguments to find a Strategy
     * @example
     * // Get one Strategy
     * const strategy = await prisma.strategy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StrategyFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StrategyFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Strategy'> extends True ? CheckSelect<T, Prisma__StrategyClient<Strategy>, Prisma__StrategyClient<StrategyGetPayload<T>>> : CheckSelect<T, Prisma__StrategyClient<Strategy | null >, Prisma__StrategyClient<StrategyGetPayload<T> | null >>

    /**
     * Find zero or more Strategies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Strategies
     * const strategies = await prisma.strategy.findMany()
     * 
     * // Get first 10 Strategies
     * const strategies = await prisma.strategy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const strategyWithIdOnly = await prisma.strategy.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StrategyFindManyArgs>(
      args?: SelectSubset<T, StrategyFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Strategy>>, PrismaPromise<Array<StrategyGetPayload<T>>>>

    /**
     * Create a Strategy.
     * @param {StrategyCreateArgs} args - Arguments to create a Strategy.
     * @example
     * // Create one Strategy
     * const Strategy = await prisma.strategy.create({
     *   data: {
     *     // ... data to create a Strategy
     *   }
     * })
     * 
    **/
    create<T extends StrategyCreateArgs>(
      args: SelectSubset<T, StrategyCreateArgs>
    ): CheckSelect<T, Prisma__StrategyClient<Strategy>, Prisma__StrategyClient<StrategyGetPayload<T>>>

    /**
     * Create many Strategies.
     *     @param {StrategyCreateManyArgs} args - Arguments to create many Strategies.
     *     @example
     *     // Create many Strategies
     *     const strategy = await prisma.strategy.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StrategyCreateManyArgs>(
      args?: SelectSubset<T, StrategyCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Strategy.
     * @param {StrategyDeleteArgs} args - Arguments to delete one Strategy.
     * @example
     * // Delete one Strategy
     * const Strategy = await prisma.strategy.delete({
     *   where: {
     *     // ... filter to delete one Strategy
     *   }
     * })
     * 
    **/
    delete<T extends StrategyDeleteArgs>(
      args: SelectSubset<T, StrategyDeleteArgs>
    ): CheckSelect<T, Prisma__StrategyClient<Strategy>, Prisma__StrategyClient<StrategyGetPayload<T>>>

    /**
     * Update one Strategy.
     * @param {StrategyUpdateArgs} args - Arguments to update one Strategy.
     * @example
     * // Update one Strategy
     * const strategy = await prisma.strategy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StrategyUpdateArgs>(
      args: SelectSubset<T, StrategyUpdateArgs>
    ): CheckSelect<T, Prisma__StrategyClient<Strategy>, Prisma__StrategyClient<StrategyGetPayload<T>>>

    /**
     * Delete zero or more Strategies.
     * @param {StrategyDeleteManyArgs} args - Arguments to filter Strategies to delete.
     * @example
     * // Delete a few Strategies
     * const { count } = await prisma.strategy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StrategyDeleteManyArgs>(
      args?: SelectSubset<T, StrategyDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Strategies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Strategies
     * const strategy = await prisma.strategy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StrategyUpdateManyArgs>(
      args: SelectSubset<T, StrategyUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Strategy.
     * @param {StrategyUpsertArgs} args - Arguments to update or create a Strategy.
     * @example
     * // Update or create a Strategy
     * const strategy = await prisma.strategy.upsert({
     *   create: {
     *     // ... data to create a Strategy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Strategy we want to update
     *   }
     * })
    **/
    upsert<T extends StrategyUpsertArgs>(
      args: SelectSubset<T, StrategyUpsertArgs>
    ): CheckSelect<T, Prisma__StrategyClient<Strategy>, Prisma__StrategyClient<StrategyGetPayload<T>>>

    /**
     * Find one Strategy that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {StrategyFindUniqueOrThrowArgs} args - Arguments to find a Strategy
     * @example
     * // Get one Strategy
     * const strategy = await prisma.strategy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StrategyFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, StrategyFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__StrategyClient<Strategy>, Prisma__StrategyClient<StrategyGetPayload<T>>>

    /**
     * Find the first Strategy that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyFindFirstOrThrowArgs} args - Arguments to find a Strategy
     * @example
     * // Get one Strategy
     * const strategy = await prisma.strategy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StrategyFindFirstOrThrowArgs>(
      args?: SelectSubset<T, StrategyFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__StrategyClient<Strategy>, Prisma__StrategyClient<StrategyGetPayload<T>>>

    /**
     * Count the number of Strategies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyCountArgs} args - Arguments to filter Strategies to count.
     * @example
     * // Count the number of Strategies
     * const count = await prisma.strategy.count({
     *   where: {
     *     // ... the filter for the Strategies we want to count
     *   }
     * })
    **/
    count<T extends StrategyCountArgs>(
      args?: Subset<T, StrategyCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StrategyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Strategy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StrategyAggregateArgs>(args: Subset<T, StrategyAggregateArgs>): PrismaPromise<GetStrategyAggregateType<T>>

    /**
     * Group by Strategy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StrategyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StrategyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StrategyGroupByArgs['orderBy'] }
        : { orderBy?: StrategyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StrategyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStrategyGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Strategy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StrategyClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    owner<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    transactions<T extends TransactionFindManyArgs = {}>(args?: Subset<T, TransactionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Transaction>>, PrismaPromise<Array<TransactionGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Strategy base type for findUnique actions
   */
  export type StrategyFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Strategy
     * 
    **/
    select?: StrategySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StrategyInclude | null
    /**
     * Filter, which Strategy to fetch.
     * 
    **/
    where: StrategyWhereUniqueInput
  }

  /**
   * Strategy: findUnique
   */
  export interface StrategyFindUniqueArgs extends StrategyFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Strategy base type for findFirst actions
   */
  export type StrategyFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Strategy
     * 
    **/
    select?: StrategySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StrategyInclude | null
    /**
     * Filter, which Strategy to fetch.
     * 
    **/
    where?: StrategyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Strategies to fetch.
     * 
    **/
    orderBy?: Enumerable<StrategyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Strategies.
     * 
    **/
    cursor?: StrategyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Strategies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Strategies.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Strategies.
     * 
    **/
    distinct?: Enumerable<StrategyScalarFieldEnum>
  }

  /**
   * Strategy: findFirst
   */
  export interface StrategyFindFirstArgs extends StrategyFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Strategy findMany
   */
  export type StrategyFindManyArgs = {
    /**
     * Select specific fields to fetch from the Strategy
     * 
    **/
    select?: StrategySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StrategyInclude | null
    /**
     * Filter, which Strategies to fetch.
     * 
    **/
    where?: StrategyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Strategies to fetch.
     * 
    **/
    orderBy?: Enumerable<StrategyOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Strategies.
     * 
    **/
    cursor?: StrategyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Strategies from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Strategies.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StrategyScalarFieldEnum>
  }


  /**
   * Strategy create
   */
  export type StrategyCreateArgs = {
    /**
     * Select specific fields to fetch from the Strategy
     * 
    **/
    select?: StrategySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StrategyInclude | null
    /**
     * The data needed to create a Strategy.
     * 
    **/
    data: XOR<StrategyCreateInput, StrategyUncheckedCreateInput>
  }


  /**
   * Strategy createMany
   */
  export type StrategyCreateManyArgs = {
    /**
     * The data used to create many Strategies.
     * 
    **/
    data: Enumerable<StrategyCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Strategy update
   */
  export type StrategyUpdateArgs = {
    /**
     * Select specific fields to fetch from the Strategy
     * 
    **/
    select?: StrategySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StrategyInclude | null
    /**
     * The data needed to update a Strategy.
     * 
    **/
    data: XOR<StrategyUpdateInput, StrategyUncheckedUpdateInput>
    /**
     * Choose, which Strategy to update.
     * 
    **/
    where: StrategyWhereUniqueInput
  }


  /**
   * Strategy updateMany
   */
  export type StrategyUpdateManyArgs = {
    /**
     * The data used to update Strategies.
     * 
    **/
    data: XOR<StrategyUpdateManyMutationInput, StrategyUncheckedUpdateManyInput>
    /**
     * Filter which Strategies to update
     * 
    **/
    where?: StrategyWhereInput
  }


  /**
   * Strategy upsert
   */
  export type StrategyUpsertArgs = {
    /**
     * Select specific fields to fetch from the Strategy
     * 
    **/
    select?: StrategySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StrategyInclude | null
    /**
     * The filter to search for the Strategy to update in case it exists.
     * 
    **/
    where: StrategyWhereUniqueInput
    /**
     * In case the Strategy found by the `where` argument doesn't exist, create a new Strategy with this data.
     * 
    **/
    create: XOR<StrategyCreateInput, StrategyUncheckedCreateInput>
    /**
     * In case the Strategy was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StrategyUpdateInput, StrategyUncheckedUpdateInput>
  }


  /**
   * Strategy delete
   */
  export type StrategyDeleteArgs = {
    /**
     * Select specific fields to fetch from the Strategy
     * 
    **/
    select?: StrategySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StrategyInclude | null
    /**
     * Filter which Strategy to delete.
     * 
    **/
    where: StrategyWhereUniqueInput
  }


  /**
   * Strategy deleteMany
   */
  export type StrategyDeleteManyArgs = {
    /**
     * Filter which Strategies to delete
     * 
    **/
    where?: StrategyWhereInput
  }


  /**
   * Strategy: findUniqueOrThrow
   */
  export type StrategyFindUniqueOrThrowArgs = StrategyFindUniqueArgsBase
      

  /**
   * Strategy: findFirstOrThrow
   */
  export type StrategyFindFirstOrThrowArgs = StrategyFindFirstArgsBase
      

  /**
   * Strategy without action
   */
  export type StrategyArgs = {
    /**
     * Select specific fields to fetch from the Strategy
     * 
    **/
    select?: StrategySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StrategyInclude | null
  }



  /**
   * Model Transaction
   */


  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    id: number | null
    percent: number | null
    strategyId: number | null
    buyPrice: number | null
    sellPrice: number | null
  }

  export type TransactionSumAggregateOutputType = {
    id: number | null
    percent: number | null
    strategyId: number | null
    buyPrice: number | null
    sellPrice: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: number | null
    stockId: string | null
    percent: number | null
    buyDateTime: Date | null
    sellDateTime: Date | null
    strategyId: number | null
    buyPrice: number | null
    sellPrice: number | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: number | null
    stockId: string | null
    percent: number | null
    buyDateTime: Date | null
    sellDateTime: Date | null
    strategyId: number | null
    buyPrice: number | null
    sellPrice: number | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    stockId: number
    percent: number
    buyDateTime: number
    sellDateTime: number
    strategyId: number
    buyPrice: number
    sellPrice: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    id?: true
    percent?: true
    strategyId?: true
    buyPrice?: true
    sellPrice?: true
  }

  export type TransactionSumAggregateInputType = {
    id?: true
    percent?: true
    strategyId?: true
    buyPrice?: true
    sellPrice?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    stockId?: true
    percent?: true
    buyDateTime?: true
    sellDateTime?: true
    strategyId?: true
    buyPrice?: true
    sellPrice?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    stockId?: true
    percent?: true
    buyDateTime?: true
    sellDateTime?: true
    strategyId?: true
    buyPrice?: true
    sellPrice?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    stockId?: true
    percent?: true
    buyDateTime?: true
    sellDateTime?: true
    strategyId?: true
    buyPrice?: true
    sellPrice?: true
    _all?: true
  }

  export type TransactionAggregateArgs = {
    /**
     * Filter which Transaction to aggregate.
     * 
    **/
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     * 
    **/
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs = {
    where?: TransactionWhereInput
    orderBy?: Enumerable<TransactionOrderByWithAggregationInput>
    by: Array<TransactionScalarFieldEnum>
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }


  export type TransactionGroupByOutputType = {
    id: number
    stockId: string
    percent: number
    buyDateTime: Date
    sellDateTime: Date
    strategyId: number
    buyPrice: number | null
    sellPrice: number | null
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect = {
    id?: boolean
    stock?: boolean | StockArgs
    stockId?: boolean
    percent?: boolean
    buyDateTime?: boolean
    sellDateTime?: boolean
    strategy?: boolean | StrategyArgs
    strategyId?: boolean
    buyPrice?: boolean
    sellPrice?: boolean
  }

  export type TransactionInclude = {
    stock?: boolean | StockArgs
    strategy?: boolean | StrategyArgs
  }

  export type TransactionGetPayload<
    S extends boolean | null | undefined | TransactionArgs,
    U = keyof S
      > = S extends true
        ? Transaction
    : S extends undefined
    ? never
    : S extends TransactionArgs | TransactionFindManyArgs
    ?'include' extends U
    ? Transaction  & {
    [P in TrueKeys<S['include']>]:
        P extends 'stock' ? StockGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'strategy' ? StrategyGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'stock' ? StockGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'strategy' ? StrategyGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Transaction ? Transaction[P] : never
  } 
    : Transaction
  : Transaction


  type TransactionCountArgs = Merge<
    Omit<TransactionFindManyArgs, 'select' | 'include'> & {
      select?: TransactionCountAggregateInputType | true
    }
  >

  export interface TransactionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TransactionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TransactionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Transaction'> extends True ? CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>> : CheckSelect<T, Prisma__TransactionClient<Transaction | null >, Prisma__TransactionClient<TransactionGetPayload<T> | null >>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TransactionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TransactionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Transaction'> extends True ? CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>> : CheckSelect<T, Prisma__TransactionClient<Transaction | null >, Prisma__TransactionClient<TransactionGetPayload<T> | null >>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TransactionFindManyArgs>(
      args?: SelectSubset<T, TransactionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Transaction>>, PrismaPromise<Array<TransactionGetPayload<T>>>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
    **/
    create<T extends TransactionCreateArgs>(
      args: SelectSubset<T, TransactionCreateArgs>
    ): CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>>

    /**
     * Create many Transactions.
     *     @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     *     @example
     *     // Create many Transactions
     *     const transaction = await prisma.transaction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TransactionCreateManyArgs>(
      args?: SelectSubset<T, TransactionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
    **/
    delete<T extends TransactionDeleteArgs>(
      args: SelectSubset<T, TransactionDeleteArgs>
    ): CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TransactionUpdateArgs>(
      args: SelectSubset<T, TransactionUpdateArgs>
    ): CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TransactionDeleteManyArgs>(
      args?: SelectSubset<T, TransactionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TransactionUpdateManyArgs>(
      args: SelectSubset<T, TransactionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
    **/
    upsert<T extends TransactionUpsertArgs>(
      args: SelectSubset<T, TransactionUpsertArgs>
    ): CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>>

    /**
     * Find one Transaction that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, TransactionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>>

    /**
     * Find the first Transaction that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, TransactionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>>

    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TransactionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    stock<T extends StockArgs = {}>(args?: Subset<T, StockArgs>): CheckSelect<T, Prisma__StockClient<Stock | null >, Prisma__StockClient<StockGetPayload<T> | null >>;

    strategy<T extends StrategyArgs = {}>(args?: Subset<T, StrategyArgs>): CheckSelect<T, Prisma__StrategyClient<Strategy | null >, Prisma__StrategyClient<StrategyGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Transaction base type for findUnique actions
   */
  export type TransactionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * Filter, which Transaction to fetch.
     * 
    **/
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction: findUnique
   */
  export interface TransactionFindUniqueArgs extends TransactionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Transaction base type for findFirst actions
   */
  export type TransactionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * Filter, which Transaction to fetch.
     * 
    **/
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     * 
    **/
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     * 
    **/
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     * 
    **/
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }

  /**
   * Transaction: findFirst
   */
  export interface TransactionFindFirstArgs extends TransactionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * Filter, which Transactions to fetch.
     * 
    **/
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     * 
    **/
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     * 
    **/
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }


  /**
   * Transaction create
   */
  export type TransactionCreateArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * The data needed to create a Transaction.
     * 
    **/
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }


  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs = {
    /**
     * The data used to create many Transactions.
     * 
    **/
    data: Enumerable<TransactionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Transaction update
   */
  export type TransactionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * The data needed to update a Transaction.
     * 
    **/
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     * 
    **/
    where: TransactionWhereUniqueInput
  }


  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs = {
    /**
     * The data used to update Transactions.
     * 
    **/
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     * 
    **/
    where?: TransactionWhereInput
  }


  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     * 
    **/
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     * 
    **/
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }


  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * Filter which Transaction to delete.
     * 
    **/
    where: TransactionWhereUniqueInput
  }


  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs = {
    /**
     * Filter which Transactions to delete
     * 
    **/
    where?: TransactionWhereInput
  }


  /**
   * Transaction: findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs = TransactionFindUniqueArgsBase
      

  /**
   * Transaction: findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs = TransactionFindFirstArgsBase
      

  /**
   * Transaction without action
   */
  export type TransactionArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
  }



  /**
   * Model Stock
   */


  export type AggregateStock = {
    _count: StockCountAggregateOutputType | null
    _avg: StockAvgAggregateOutputType | null
    _sum: StockSumAggregateOutputType | null
    _min: StockMinAggregateOutputType | null
    _max: StockMaxAggregateOutputType | null
  }

  export type StockAvgAggregateOutputType = {
    currentPrice: number | null
  }

  export type StockSumAggregateOutputType = {
    currentPrice: number | null
  }

  export type StockMinAggregateOutputType = {
    ticker: string | null
    currentPrice: number | null
  }

  export type StockMaxAggregateOutputType = {
    ticker: string | null
    currentPrice: number | null
  }

  export type StockCountAggregateOutputType = {
    ticker: number
    currentPrice: number
    _all: number
  }


  export type StockAvgAggregateInputType = {
    currentPrice?: true
  }

  export type StockSumAggregateInputType = {
    currentPrice?: true
  }

  export type StockMinAggregateInputType = {
    ticker?: true
    currentPrice?: true
  }

  export type StockMaxAggregateInputType = {
    ticker?: true
    currentPrice?: true
  }

  export type StockCountAggregateInputType = {
    ticker?: true
    currentPrice?: true
    _all?: true
  }

  export type StockAggregateArgs = {
    /**
     * Filter which Stock to aggregate.
     * 
    **/
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     * 
    **/
    orderBy?: Enumerable<StockOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stocks
    **/
    _count?: true | StockCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StockAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StockSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StockMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StockMaxAggregateInputType
  }

  export type GetStockAggregateType<T extends StockAggregateArgs> = {
        [P in keyof T & keyof AggregateStock]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStock[P]>
      : GetScalarType<T[P], AggregateStock[P]>
  }




  export type StockGroupByArgs = {
    where?: StockWhereInput
    orderBy?: Enumerable<StockOrderByWithAggregationInput>
    by: Array<StockScalarFieldEnum>
    having?: StockScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StockCountAggregateInputType | true
    _avg?: StockAvgAggregateInputType
    _sum?: StockSumAggregateInputType
    _min?: StockMinAggregateInputType
    _max?: StockMaxAggregateInputType
  }


  export type StockGroupByOutputType = {
    ticker: string
    currentPrice: number
    _count: StockCountAggregateOutputType | null
    _avg: StockAvgAggregateOutputType | null
    _sum: StockSumAggregateOutputType | null
    _min: StockMinAggregateOutputType | null
    _max: StockMaxAggregateOutputType | null
  }

  type GetStockGroupByPayload<T extends StockGroupByArgs> = PrismaPromise<
    Array<
      PickArray<StockGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StockGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StockGroupByOutputType[P]>
            : GetScalarType<T[P], StockGroupByOutputType[P]>
        }
      >
    >


  export type StockSelect = {
    ticker?: boolean
    transactions?: boolean | TransactionFindManyArgs
    pricePoints?: boolean | PricePointFindManyArgs
    currentPrice?: boolean
    _count?: boolean | StockCountOutputTypeArgs
  }

  export type StockInclude = {
    transactions?: boolean | TransactionFindManyArgs
    pricePoints?: boolean | PricePointFindManyArgs
    _count?: boolean | StockCountOutputTypeArgs
  }

  export type StockGetPayload<
    S extends boolean | null | undefined | StockArgs,
    U = keyof S
      > = S extends true
        ? Stock
    : S extends undefined
    ? never
    : S extends StockArgs | StockFindManyArgs
    ?'include' extends U
    ? Stock  & {
    [P in TrueKeys<S['include']>]:
        P extends 'transactions' ? Array < TransactionGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'pricePoints' ? Array < PricePointGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? StockCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'transactions' ? Array < TransactionGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'pricePoints' ? Array < PricePointGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? StockCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Stock ? Stock[P] : never
  } 
    : Stock
  : Stock


  type StockCountArgs = Merge<
    Omit<StockFindManyArgs, 'select' | 'include'> & {
      select?: StockCountAggregateInputType | true
    }
  >

  export interface StockDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Stock that matches the filter.
     * @param {StockFindUniqueArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StockFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, StockFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Stock'> extends True ? CheckSelect<T, Prisma__StockClient<Stock>, Prisma__StockClient<StockGetPayload<T>>> : CheckSelect<T, Prisma__StockClient<Stock | null >, Prisma__StockClient<StockGetPayload<T> | null >>

    /**
     * Find the first Stock that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindFirstArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StockFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, StockFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Stock'> extends True ? CheckSelect<T, Prisma__StockClient<Stock>, Prisma__StockClient<StockGetPayload<T>>> : CheckSelect<T, Prisma__StockClient<Stock | null >, Prisma__StockClient<StockGetPayload<T> | null >>

    /**
     * Find zero or more Stocks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stocks
     * const stocks = await prisma.stock.findMany()
     * 
     * // Get first 10 Stocks
     * const stocks = await prisma.stock.findMany({ take: 10 })
     * 
     * // Only select the `ticker`
     * const stockWithTickerOnly = await prisma.stock.findMany({ select: { ticker: true } })
     * 
    **/
    findMany<T extends StockFindManyArgs>(
      args?: SelectSubset<T, StockFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Stock>>, PrismaPromise<Array<StockGetPayload<T>>>>

    /**
     * Create a Stock.
     * @param {StockCreateArgs} args - Arguments to create a Stock.
     * @example
     * // Create one Stock
     * const Stock = await prisma.stock.create({
     *   data: {
     *     // ... data to create a Stock
     *   }
     * })
     * 
    **/
    create<T extends StockCreateArgs>(
      args: SelectSubset<T, StockCreateArgs>
    ): CheckSelect<T, Prisma__StockClient<Stock>, Prisma__StockClient<StockGetPayload<T>>>

    /**
     * Create many Stocks.
     *     @param {StockCreateManyArgs} args - Arguments to create many Stocks.
     *     @example
     *     // Create many Stocks
     *     const stock = await prisma.stock.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends StockCreateManyArgs>(
      args?: SelectSubset<T, StockCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Stock.
     * @param {StockDeleteArgs} args - Arguments to delete one Stock.
     * @example
     * // Delete one Stock
     * const Stock = await prisma.stock.delete({
     *   where: {
     *     // ... filter to delete one Stock
     *   }
     * })
     * 
    **/
    delete<T extends StockDeleteArgs>(
      args: SelectSubset<T, StockDeleteArgs>
    ): CheckSelect<T, Prisma__StockClient<Stock>, Prisma__StockClient<StockGetPayload<T>>>

    /**
     * Update one Stock.
     * @param {StockUpdateArgs} args - Arguments to update one Stock.
     * @example
     * // Update one Stock
     * const stock = await prisma.stock.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StockUpdateArgs>(
      args: SelectSubset<T, StockUpdateArgs>
    ): CheckSelect<T, Prisma__StockClient<Stock>, Prisma__StockClient<StockGetPayload<T>>>

    /**
     * Delete zero or more Stocks.
     * @param {StockDeleteManyArgs} args - Arguments to filter Stocks to delete.
     * @example
     * // Delete a few Stocks
     * const { count } = await prisma.stock.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StockDeleteManyArgs>(
      args?: SelectSubset<T, StockDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stocks
     * const stock = await prisma.stock.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StockUpdateManyArgs>(
      args: SelectSubset<T, StockUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Stock.
     * @param {StockUpsertArgs} args - Arguments to update or create a Stock.
     * @example
     * // Update or create a Stock
     * const stock = await prisma.stock.upsert({
     *   create: {
     *     // ... data to create a Stock
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stock we want to update
     *   }
     * })
    **/
    upsert<T extends StockUpsertArgs>(
      args: SelectSubset<T, StockUpsertArgs>
    ): CheckSelect<T, Prisma__StockClient<Stock>, Prisma__StockClient<StockGetPayload<T>>>

    /**
     * Find one Stock that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {StockFindUniqueOrThrowArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StockFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, StockFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__StockClient<Stock>, Prisma__StockClient<StockGetPayload<T>>>

    /**
     * Find the first Stock that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockFindFirstOrThrowArgs} args - Arguments to find a Stock
     * @example
     * // Get one Stock
     * const stock = await prisma.stock.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StockFindFirstOrThrowArgs>(
      args?: SelectSubset<T, StockFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__StockClient<Stock>, Prisma__StockClient<StockGetPayload<T>>>

    /**
     * Count the number of Stocks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockCountArgs} args - Arguments to filter Stocks to count.
     * @example
     * // Count the number of Stocks
     * const count = await prisma.stock.count({
     *   where: {
     *     // ... the filter for the Stocks we want to count
     *   }
     * })
    **/
    count<T extends StockCountArgs>(
      args?: Subset<T, StockCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StockCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StockAggregateArgs>(args: Subset<T, StockAggregateArgs>): PrismaPromise<GetStockAggregateType<T>>

    /**
     * Group by Stock.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StockGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StockGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StockGroupByArgs['orderBy'] }
        : { orderBy?: StockGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StockGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStockGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Stock.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__StockClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    transactions<T extends TransactionFindManyArgs = {}>(args?: Subset<T, TransactionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Transaction>>, PrismaPromise<Array<TransactionGetPayload<T>>>>;

    pricePoints<T extends PricePointFindManyArgs = {}>(args?: Subset<T, PricePointFindManyArgs>): CheckSelect<T, PrismaPromise<Array<PricePoint>>, PrismaPromise<Array<PricePointGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Stock base type for findUnique actions
   */
  export type StockFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Stock
     * 
    **/
    select?: StockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StockInclude | null
    /**
     * Filter, which Stock to fetch.
     * 
    **/
    where: StockWhereUniqueInput
  }

  /**
   * Stock: findUnique
   */
  export interface StockFindUniqueArgs extends StockFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Stock base type for findFirst actions
   */
  export type StockFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Stock
     * 
    **/
    select?: StockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StockInclude | null
    /**
     * Filter, which Stock to fetch.
     * 
    **/
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     * 
    **/
    orderBy?: Enumerable<StockOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stocks.
     * 
    **/
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stocks.
     * 
    **/
    distinct?: Enumerable<StockScalarFieldEnum>
  }

  /**
   * Stock: findFirst
   */
  export interface StockFindFirstArgs extends StockFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Stock findMany
   */
  export type StockFindManyArgs = {
    /**
     * Select specific fields to fetch from the Stock
     * 
    **/
    select?: StockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StockInclude | null
    /**
     * Filter, which Stocks to fetch.
     * 
    **/
    where?: StockWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stocks to fetch.
     * 
    **/
    orderBy?: Enumerable<StockOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stocks.
     * 
    **/
    cursor?: StockWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stocks from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stocks.
     * 
    **/
    skip?: number
    distinct?: Enumerable<StockScalarFieldEnum>
  }


  /**
   * Stock create
   */
  export type StockCreateArgs = {
    /**
     * Select specific fields to fetch from the Stock
     * 
    **/
    select?: StockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StockInclude | null
    /**
     * The data needed to create a Stock.
     * 
    **/
    data: XOR<StockCreateInput, StockUncheckedCreateInput>
  }


  /**
   * Stock createMany
   */
  export type StockCreateManyArgs = {
    /**
     * The data used to create many Stocks.
     * 
    **/
    data: Enumerable<StockCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Stock update
   */
  export type StockUpdateArgs = {
    /**
     * Select specific fields to fetch from the Stock
     * 
    **/
    select?: StockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StockInclude | null
    /**
     * The data needed to update a Stock.
     * 
    **/
    data: XOR<StockUpdateInput, StockUncheckedUpdateInput>
    /**
     * Choose, which Stock to update.
     * 
    **/
    where: StockWhereUniqueInput
  }


  /**
   * Stock updateMany
   */
  export type StockUpdateManyArgs = {
    /**
     * The data used to update Stocks.
     * 
    **/
    data: XOR<StockUpdateManyMutationInput, StockUncheckedUpdateManyInput>
    /**
     * Filter which Stocks to update
     * 
    **/
    where?: StockWhereInput
  }


  /**
   * Stock upsert
   */
  export type StockUpsertArgs = {
    /**
     * Select specific fields to fetch from the Stock
     * 
    **/
    select?: StockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StockInclude | null
    /**
     * The filter to search for the Stock to update in case it exists.
     * 
    **/
    where: StockWhereUniqueInput
    /**
     * In case the Stock found by the `where` argument doesn't exist, create a new Stock with this data.
     * 
    **/
    create: XOR<StockCreateInput, StockUncheckedCreateInput>
    /**
     * In case the Stock was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<StockUpdateInput, StockUncheckedUpdateInput>
  }


  /**
   * Stock delete
   */
  export type StockDeleteArgs = {
    /**
     * Select specific fields to fetch from the Stock
     * 
    **/
    select?: StockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StockInclude | null
    /**
     * Filter which Stock to delete.
     * 
    **/
    where: StockWhereUniqueInput
  }


  /**
   * Stock deleteMany
   */
  export type StockDeleteManyArgs = {
    /**
     * Filter which Stocks to delete
     * 
    **/
    where?: StockWhereInput
  }


  /**
   * Stock: findUniqueOrThrow
   */
  export type StockFindUniqueOrThrowArgs = StockFindUniqueArgsBase
      

  /**
   * Stock: findFirstOrThrow
   */
  export type StockFindFirstOrThrowArgs = StockFindFirstArgsBase
      

  /**
   * Stock without action
   */
  export type StockArgs = {
    /**
     * Select specific fields to fetch from the Stock
     * 
    **/
    select?: StockSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: StockInclude | null
  }



  /**
   * Model PricePoint
   */


  export type AggregatePricePoint = {
    _count: PricePointCountAggregateOutputType | null
    _avg: PricePointAvgAggregateOutputType | null
    _sum: PricePointSumAggregateOutputType | null
    _min: PricePointMinAggregateOutputType | null
    _max: PricePointMaxAggregateOutputType | null
  }

  export type PricePointAvgAggregateOutputType = {
    price: number | null
    dateTime: number | null
  }

  export type PricePointSumAggregateOutputType = {
    price: number | null
    dateTime: number | null
  }

  export type PricePointMinAggregateOutputType = {
    price: number | null
    dateTime: number | null
    stockId: string | null
  }

  export type PricePointMaxAggregateOutputType = {
    price: number | null
    dateTime: number | null
    stockId: string | null
  }

  export type PricePointCountAggregateOutputType = {
    price: number
    dateTime: number
    stockId: number
    _all: number
  }


  export type PricePointAvgAggregateInputType = {
    price?: true
    dateTime?: true
  }

  export type PricePointSumAggregateInputType = {
    price?: true
    dateTime?: true
  }

  export type PricePointMinAggregateInputType = {
    price?: true
    dateTime?: true
    stockId?: true
  }

  export type PricePointMaxAggregateInputType = {
    price?: true
    dateTime?: true
    stockId?: true
  }

  export type PricePointCountAggregateInputType = {
    price?: true
    dateTime?: true
    stockId?: true
    _all?: true
  }

  export type PricePointAggregateArgs = {
    /**
     * Filter which PricePoint to aggregate.
     * 
    **/
    where?: PricePointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PricePoints to fetch.
     * 
    **/
    orderBy?: Enumerable<PricePointOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PricePointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PricePoints from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PricePoints.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PricePoints
    **/
    _count?: true | PricePointCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PricePointAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PricePointSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PricePointMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PricePointMaxAggregateInputType
  }

  export type GetPricePointAggregateType<T extends PricePointAggregateArgs> = {
        [P in keyof T & keyof AggregatePricePoint]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePricePoint[P]>
      : GetScalarType<T[P], AggregatePricePoint[P]>
  }




  export type PricePointGroupByArgs = {
    where?: PricePointWhereInput
    orderBy?: Enumerable<PricePointOrderByWithAggregationInput>
    by: Array<PricePointScalarFieldEnum>
    having?: PricePointScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PricePointCountAggregateInputType | true
    _avg?: PricePointAvgAggregateInputType
    _sum?: PricePointSumAggregateInputType
    _min?: PricePointMinAggregateInputType
    _max?: PricePointMaxAggregateInputType
  }


  export type PricePointGroupByOutputType = {
    price: number
    dateTime: number
    stockId: string
    _count: PricePointCountAggregateOutputType | null
    _avg: PricePointAvgAggregateOutputType | null
    _sum: PricePointSumAggregateOutputType | null
    _min: PricePointMinAggregateOutputType | null
    _max: PricePointMaxAggregateOutputType | null
  }

  type GetPricePointGroupByPayload<T extends PricePointGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PricePointGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PricePointGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PricePointGroupByOutputType[P]>
            : GetScalarType<T[P], PricePointGroupByOutputType[P]>
        }
      >
    >


  export type PricePointSelect = {
    price?: boolean
    dateTime?: boolean
    stock?: boolean | StockArgs
    stockId?: boolean
  }

  export type PricePointInclude = {
    stock?: boolean | StockArgs
  }

  export type PricePointGetPayload<
    S extends boolean | null | undefined | PricePointArgs,
    U = keyof S
      > = S extends true
        ? PricePoint
    : S extends undefined
    ? never
    : S extends PricePointArgs | PricePointFindManyArgs
    ?'include' extends U
    ? PricePoint  & {
    [P in TrueKeys<S['include']>]:
        P extends 'stock' ? StockGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'stock' ? StockGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof PricePoint ? PricePoint[P] : never
  } 
    : PricePoint
  : PricePoint


  type PricePointCountArgs = Merge<
    Omit<PricePointFindManyArgs, 'select' | 'include'> & {
      select?: PricePointCountAggregateInputType | true
    }
  >

  export interface PricePointDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one PricePoint that matches the filter.
     * @param {PricePointFindUniqueArgs} args - Arguments to find a PricePoint
     * @example
     * // Get one PricePoint
     * const pricePoint = await prisma.pricePoint.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PricePointFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PricePointFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PricePoint'> extends True ? CheckSelect<T, Prisma__PricePointClient<PricePoint>, Prisma__PricePointClient<PricePointGetPayload<T>>> : CheckSelect<T, Prisma__PricePointClient<PricePoint | null >, Prisma__PricePointClient<PricePointGetPayload<T> | null >>

    /**
     * Find the first PricePoint that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PricePointFindFirstArgs} args - Arguments to find a PricePoint
     * @example
     * // Get one PricePoint
     * const pricePoint = await prisma.pricePoint.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PricePointFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PricePointFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PricePoint'> extends True ? CheckSelect<T, Prisma__PricePointClient<PricePoint>, Prisma__PricePointClient<PricePointGetPayload<T>>> : CheckSelect<T, Prisma__PricePointClient<PricePoint | null >, Prisma__PricePointClient<PricePointGetPayload<T> | null >>

    /**
     * Find zero or more PricePoints that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PricePointFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PricePoints
     * const pricePoints = await prisma.pricePoint.findMany()
     * 
     * // Get first 10 PricePoints
     * const pricePoints = await prisma.pricePoint.findMany({ take: 10 })
     * 
     * // Only select the `price`
     * const pricePointWithPriceOnly = await prisma.pricePoint.findMany({ select: { price: true } })
     * 
    **/
    findMany<T extends PricePointFindManyArgs>(
      args?: SelectSubset<T, PricePointFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<PricePoint>>, PrismaPromise<Array<PricePointGetPayload<T>>>>

    /**
     * Create a PricePoint.
     * @param {PricePointCreateArgs} args - Arguments to create a PricePoint.
     * @example
     * // Create one PricePoint
     * const PricePoint = await prisma.pricePoint.create({
     *   data: {
     *     // ... data to create a PricePoint
     *   }
     * })
     * 
    **/
    create<T extends PricePointCreateArgs>(
      args: SelectSubset<T, PricePointCreateArgs>
    ): CheckSelect<T, Prisma__PricePointClient<PricePoint>, Prisma__PricePointClient<PricePointGetPayload<T>>>

    /**
     * Create many PricePoints.
     *     @param {PricePointCreateManyArgs} args - Arguments to create many PricePoints.
     *     @example
     *     // Create many PricePoints
     *     const pricePoint = await prisma.pricePoint.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PricePointCreateManyArgs>(
      args?: SelectSubset<T, PricePointCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a PricePoint.
     * @param {PricePointDeleteArgs} args - Arguments to delete one PricePoint.
     * @example
     * // Delete one PricePoint
     * const PricePoint = await prisma.pricePoint.delete({
     *   where: {
     *     // ... filter to delete one PricePoint
     *   }
     * })
     * 
    **/
    delete<T extends PricePointDeleteArgs>(
      args: SelectSubset<T, PricePointDeleteArgs>
    ): CheckSelect<T, Prisma__PricePointClient<PricePoint>, Prisma__PricePointClient<PricePointGetPayload<T>>>

    /**
     * Update one PricePoint.
     * @param {PricePointUpdateArgs} args - Arguments to update one PricePoint.
     * @example
     * // Update one PricePoint
     * const pricePoint = await prisma.pricePoint.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PricePointUpdateArgs>(
      args: SelectSubset<T, PricePointUpdateArgs>
    ): CheckSelect<T, Prisma__PricePointClient<PricePoint>, Prisma__PricePointClient<PricePointGetPayload<T>>>

    /**
     * Delete zero or more PricePoints.
     * @param {PricePointDeleteManyArgs} args - Arguments to filter PricePoints to delete.
     * @example
     * // Delete a few PricePoints
     * const { count } = await prisma.pricePoint.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PricePointDeleteManyArgs>(
      args?: SelectSubset<T, PricePointDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PricePoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PricePointUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PricePoints
     * const pricePoint = await prisma.pricePoint.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PricePointUpdateManyArgs>(
      args: SelectSubset<T, PricePointUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PricePoint.
     * @param {PricePointUpsertArgs} args - Arguments to update or create a PricePoint.
     * @example
     * // Update or create a PricePoint
     * const pricePoint = await prisma.pricePoint.upsert({
     *   create: {
     *     // ... data to create a PricePoint
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PricePoint we want to update
     *   }
     * })
    **/
    upsert<T extends PricePointUpsertArgs>(
      args: SelectSubset<T, PricePointUpsertArgs>
    ): CheckSelect<T, Prisma__PricePointClient<PricePoint>, Prisma__PricePointClient<PricePointGetPayload<T>>>

    /**
     * Find one PricePoint that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {PricePointFindUniqueOrThrowArgs} args - Arguments to find a PricePoint
     * @example
     * // Get one PricePoint
     * const pricePoint = await prisma.pricePoint.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PricePointFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PricePointFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__PricePointClient<PricePoint>, Prisma__PricePointClient<PricePointGetPayload<T>>>

    /**
     * Find the first PricePoint that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PricePointFindFirstOrThrowArgs} args - Arguments to find a PricePoint
     * @example
     * // Get one PricePoint
     * const pricePoint = await prisma.pricePoint.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PricePointFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PricePointFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__PricePointClient<PricePoint>, Prisma__PricePointClient<PricePointGetPayload<T>>>

    /**
     * Count the number of PricePoints.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PricePointCountArgs} args - Arguments to filter PricePoints to count.
     * @example
     * // Count the number of PricePoints
     * const count = await prisma.pricePoint.count({
     *   where: {
     *     // ... the filter for the PricePoints we want to count
     *   }
     * })
    **/
    count<T extends PricePointCountArgs>(
      args?: Subset<T, PricePointCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PricePointCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PricePoint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PricePointAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PricePointAggregateArgs>(args: Subset<T, PricePointAggregateArgs>): PrismaPromise<GetPricePointAggregateType<T>>

    /**
     * Group by PricePoint.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PricePointGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PricePointGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PricePointGroupByArgs['orderBy'] }
        : { orderBy?: PricePointGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PricePointGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPricePointGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for PricePoint.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PricePointClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    stock<T extends StockArgs = {}>(args?: Subset<T, StockArgs>): CheckSelect<T, Prisma__StockClient<Stock | null >, Prisma__StockClient<StockGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * PricePoint base type for findUnique actions
   */
  export type PricePointFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the PricePoint
     * 
    **/
    select?: PricePointSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PricePointInclude | null
    /**
     * Filter, which PricePoint to fetch.
     * 
    **/
    where: PricePointWhereUniqueInput
  }

  /**
   * PricePoint: findUnique
   */
  export interface PricePointFindUniqueArgs extends PricePointFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PricePoint base type for findFirst actions
   */
  export type PricePointFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the PricePoint
     * 
    **/
    select?: PricePointSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PricePointInclude | null
    /**
     * Filter, which PricePoint to fetch.
     * 
    **/
    where?: PricePointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PricePoints to fetch.
     * 
    **/
    orderBy?: Enumerable<PricePointOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PricePoints.
     * 
    **/
    cursor?: PricePointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PricePoints from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PricePoints.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PricePoints.
     * 
    **/
    distinct?: Enumerable<PricePointScalarFieldEnum>
  }

  /**
   * PricePoint: findFirst
   */
  export interface PricePointFindFirstArgs extends PricePointFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PricePoint findMany
   */
  export type PricePointFindManyArgs = {
    /**
     * Select specific fields to fetch from the PricePoint
     * 
    **/
    select?: PricePointSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PricePointInclude | null
    /**
     * Filter, which PricePoints to fetch.
     * 
    **/
    where?: PricePointWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PricePoints to fetch.
     * 
    **/
    orderBy?: Enumerable<PricePointOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PricePoints.
     * 
    **/
    cursor?: PricePointWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PricePoints from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PricePoints.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PricePointScalarFieldEnum>
  }


  /**
   * PricePoint create
   */
  export type PricePointCreateArgs = {
    /**
     * Select specific fields to fetch from the PricePoint
     * 
    **/
    select?: PricePointSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PricePointInclude | null
    /**
     * The data needed to create a PricePoint.
     * 
    **/
    data: XOR<PricePointCreateInput, PricePointUncheckedCreateInput>
  }


  /**
   * PricePoint createMany
   */
  export type PricePointCreateManyArgs = {
    /**
     * The data used to create many PricePoints.
     * 
    **/
    data: Enumerable<PricePointCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * PricePoint update
   */
  export type PricePointUpdateArgs = {
    /**
     * Select specific fields to fetch from the PricePoint
     * 
    **/
    select?: PricePointSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PricePointInclude | null
    /**
     * The data needed to update a PricePoint.
     * 
    **/
    data: XOR<PricePointUpdateInput, PricePointUncheckedUpdateInput>
    /**
     * Choose, which PricePoint to update.
     * 
    **/
    where: PricePointWhereUniqueInput
  }


  /**
   * PricePoint updateMany
   */
  export type PricePointUpdateManyArgs = {
    /**
     * The data used to update PricePoints.
     * 
    **/
    data: XOR<PricePointUpdateManyMutationInput, PricePointUncheckedUpdateManyInput>
    /**
     * Filter which PricePoints to update
     * 
    **/
    where?: PricePointWhereInput
  }


  /**
   * PricePoint upsert
   */
  export type PricePointUpsertArgs = {
    /**
     * Select specific fields to fetch from the PricePoint
     * 
    **/
    select?: PricePointSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PricePointInclude | null
    /**
     * The filter to search for the PricePoint to update in case it exists.
     * 
    **/
    where: PricePointWhereUniqueInput
    /**
     * In case the PricePoint found by the `where` argument doesn't exist, create a new PricePoint with this data.
     * 
    **/
    create: XOR<PricePointCreateInput, PricePointUncheckedCreateInput>
    /**
     * In case the PricePoint was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PricePointUpdateInput, PricePointUncheckedUpdateInput>
  }


  /**
   * PricePoint delete
   */
  export type PricePointDeleteArgs = {
    /**
     * Select specific fields to fetch from the PricePoint
     * 
    **/
    select?: PricePointSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PricePointInclude | null
    /**
     * Filter which PricePoint to delete.
     * 
    **/
    where: PricePointWhereUniqueInput
  }


  /**
   * PricePoint deleteMany
   */
  export type PricePointDeleteManyArgs = {
    /**
     * Filter which PricePoints to delete
     * 
    **/
    where?: PricePointWhereInput
  }


  /**
   * PricePoint: findUniqueOrThrow
   */
  export type PricePointFindUniqueOrThrowArgs = PricePointFindUniqueArgsBase
      

  /**
   * PricePoint: findFirstOrThrow
   */
  export type PricePointFindFirstOrThrowArgs = PricePointFindFirstArgsBase
      

  /**
   * PricePoint without action
   */
  export type PricePointArgs = {
    /**
     * Select specific fields to fetch from the PricePoint
     * 
    **/
    select?: PricePointSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PricePointInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const PricePointScalarFieldEnum: {
    price: 'price',
    dateTime: 'dateTime',
    stockId: 'stockId'
  };

  export type PricePointScalarFieldEnum = (typeof PricePointScalarFieldEnum)[keyof typeof PricePointScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const StockScalarFieldEnum: {
    ticker: 'ticker',
    currentPrice: 'currentPrice'
  };

  export type StockScalarFieldEnum = (typeof StockScalarFieldEnum)[keyof typeof StockScalarFieldEnum]


  export const StrategyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    ownerId: 'ownerId'
  };

  export type StrategyScalarFieldEnum = (typeof StrategyScalarFieldEnum)[keyof typeof StrategyScalarFieldEnum]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    stockId: 'stockId',
    percent: 'percent',
    buyDateTime: 'buyDateTime',
    sellDateTime: 'sellDateTime',
    strategyId: 'strategyId',
    buyPrice: 'buyPrice',
    sellPrice: 'sellPrice'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    username: 'username',
    email: 'email',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    username?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    sessions?: SessionListRelationFilter
    strategies?: StrategyListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    sessions?: SessionOrderByRelationAggregateInput
    strategies?: StrategyOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    username?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    userId?: StringFilter | string
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    user?: UserOrderByWithRelationInput
    userId?: SortOrder
  }

  export type SessionWhereUniqueInput = {
    id?: string
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
  }

  export type StrategyWhereInput = {
    AND?: Enumerable<StrategyWhereInput>
    OR?: Enumerable<StrategyWhereInput>
    NOT?: Enumerable<StrategyWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    owner?: XOR<UserRelationFilter, UserWhereInput>
    ownerId?: StringFilter | string
    transactions?: TransactionListRelationFilter
  }

  export type StrategyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    owner?: UserOrderByWithRelationInput
    ownerId?: SortOrder
    transactions?: TransactionOrderByRelationAggregateInput
  }

  export type StrategyWhereUniqueInput = {
    id?: number
  }

  export type StrategyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
    _count?: StrategyCountOrderByAggregateInput
    _avg?: StrategyAvgOrderByAggregateInput
    _max?: StrategyMaxOrderByAggregateInput
    _min?: StrategyMinOrderByAggregateInput
    _sum?: StrategySumOrderByAggregateInput
  }

  export type StrategyScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StrategyScalarWhereWithAggregatesInput>
    OR?: Enumerable<StrategyScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StrategyScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    ownerId?: StringWithAggregatesFilter | string
  }

  export type TransactionWhereInput = {
    AND?: Enumerable<TransactionWhereInput>
    OR?: Enumerable<TransactionWhereInput>
    NOT?: Enumerable<TransactionWhereInput>
    id?: IntFilter | number
    stock?: XOR<StockRelationFilter, StockWhereInput>
    stockId?: StringFilter | string
    percent?: IntFilter | number
    buyDateTime?: DateTimeFilter | Date | string
    sellDateTime?: DateTimeFilter | Date | string
    strategy?: XOR<StrategyRelationFilter, StrategyWhereInput>
    strategyId?: IntFilter | number
    buyPrice?: FloatNullableFilter | number | null
    sellPrice?: FloatNullableFilter | number | null
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    stock?: StockOrderByWithRelationInput
    stockId?: SortOrder
    percent?: SortOrder
    buyDateTime?: SortOrder
    sellDateTime?: SortOrder
    strategy?: StrategyOrderByWithRelationInput
    strategyId?: SortOrder
    buyPrice?: SortOrder
    sellPrice?: SortOrder
  }

  export type TransactionWhereUniqueInput = {
    id?: number
  }

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    stockId?: SortOrder
    percent?: SortOrder
    buyDateTime?: SortOrder
    sellDateTime?: SortOrder
    strategyId?: SortOrder
    buyPrice?: SortOrder
    sellPrice?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    OR?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    stockId?: StringWithAggregatesFilter | string
    percent?: IntWithAggregatesFilter | number
    buyDateTime?: DateTimeWithAggregatesFilter | Date | string
    sellDateTime?: DateTimeWithAggregatesFilter | Date | string
    strategyId?: IntWithAggregatesFilter | number
    buyPrice?: FloatNullableWithAggregatesFilter | number | null
    sellPrice?: FloatNullableWithAggregatesFilter | number | null
  }

  export type StockWhereInput = {
    AND?: Enumerable<StockWhereInput>
    OR?: Enumerable<StockWhereInput>
    NOT?: Enumerable<StockWhereInput>
    ticker?: StringFilter | string
    transactions?: TransactionListRelationFilter
    pricePoints?: PricePointListRelationFilter
    currentPrice?: FloatFilter | number
  }

  export type StockOrderByWithRelationInput = {
    ticker?: SortOrder
    transactions?: TransactionOrderByRelationAggregateInput
    pricePoints?: PricePointOrderByRelationAggregateInput
    currentPrice?: SortOrder
  }

  export type StockWhereUniqueInput = {
    ticker?: string
  }

  export type StockOrderByWithAggregationInput = {
    ticker?: SortOrder
    currentPrice?: SortOrder
    _count?: StockCountOrderByAggregateInput
    _avg?: StockAvgOrderByAggregateInput
    _max?: StockMaxOrderByAggregateInput
    _min?: StockMinOrderByAggregateInput
    _sum?: StockSumOrderByAggregateInput
  }

  export type StockScalarWhereWithAggregatesInput = {
    AND?: Enumerable<StockScalarWhereWithAggregatesInput>
    OR?: Enumerable<StockScalarWhereWithAggregatesInput>
    NOT?: Enumerable<StockScalarWhereWithAggregatesInput>
    ticker?: StringWithAggregatesFilter | string
    currentPrice?: FloatWithAggregatesFilter | number
  }

  export type PricePointWhereInput = {
    AND?: Enumerable<PricePointWhereInput>
    OR?: Enumerable<PricePointWhereInput>
    NOT?: Enumerable<PricePointWhereInput>
    price?: FloatFilter | number
    dateTime?: FloatFilter | number
    stock?: XOR<StockRelationFilter, StockWhereInput>
    stockId?: StringFilter | string
  }

  export type PricePointOrderByWithRelationInput = {
    price?: SortOrder
    dateTime?: SortOrder
    stock?: StockOrderByWithRelationInput
    stockId?: SortOrder
  }

  export type PricePointWhereUniqueInput = {
    dateTime_stockId?: PricePointDateTimeStockIdCompoundUniqueInput
  }

  export type PricePointOrderByWithAggregationInput = {
    price?: SortOrder
    dateTime?: SortOrder
    stockId?: SortOrder
    _count?: PricePointCountOrderByAggregateInput
    _avg?: PricePointAvgOrderByAggregateInput
    _max?: PricePointMaxOrderByAggregateInput
    _min?: PricePointMinOrderByAggregateInput
    _sum?: PricePointSumOrderByAggregateInput
  }

  export type PricePointScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PricePointScalarWhereWithAggregatesInput>
    OR?: Enumerable<PricePointScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PricePointScalarWhereWithAggregatesInput>
    price?: FloatWithAggregatesFilter | number
    dateTime?: FloatWithAggregatesFilter | number
    stockId?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    username: string
    email: string
    password: string
    sessions?: SessionCreateNestedManyWithoutUserInput
    strategies?: StrategyCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateInput = {
    username: string
    email: string
    password: string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    strategies?: StrategyUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    strategies?: StrategyUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    strategies?: StrategyUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type UserCreateManyInput = {
    username: string
    email: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateInput = {
    id?: string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    userId: string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateManyInput = {
    id?: string
    userId: string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StrategyCreateInput = {
    name: string
    owner: UserCreateNestedOneWithoutStrategiesInput
    transactions?: TransactionCreateNestedManyWithoutStrategyInput
  }

  export type StrategyUncheckedCreateInput = {
    id?: number
    name: string
    ownerId: string
    transactions?: TransactionUncheckedCreateNestedManyWithoutStrategyInput
  }

  export type StrategyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutStrategiesNestedInput
    transactions?: TransactionUpdateManyWithoutStrategyNestedInput
  }

  export type StrategyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
    transactions?: TransactionUncheckedUpdateManyWithoutStrategyNestedInput
  }

  export type StrategyCreateManyInput = {
    id?: number
    name: string
    ownerId: string
  }

  export type StrategyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type StrategyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionCreateInput = {
    stock: StockCreateNestedOneWithoutTransactionsInput
    percent: number
    buyDateTime: Date | string
    sellDateTime: Date | string
    strategy: StrategyCreateNestedOneWithoutTransactionsInput
    buyPrice?: number | null
    sellPrice?: number | null
  }

  export type TransactionUncheckedCreateInput = {
    id?: number
    stockId: string
    percent: number
    buyDateTime: Date | string
    sellDateTime: Date | string
    strategyId: number
    buyPrice?: number | null
    sellPrice?: number | null
  }

  export type TransactionUpdateInput = {
    stock?: StockUpdateOneRequiredWithoutTransactionsNestedInput
    percent?: IntFieldUpdateOperationsInput | number
    buyDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    strategy?: StrategyUpdateOneRequiredWithoutTransactionsNestedInput
    buyPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    sellPrice?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type TransactionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    stockId?: StringFieldUpdateOperationsInput | string
    percent?: IntFieldUpdateOperationsInput | number
    buyDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    strategyId?: IntFieldUpdateOperationsInput | number
    buyPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    sellPrice?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type TransactionCreateManyInput = {
    id?: number
    stockId: string
    percent: number
    buyDateTime: Date | string
    sellDateTime: Date | string
    strategyId: number
    buyPrice?: number | null
    sellPrice?: number | null
  }

  export type TransactionUpdateManyMutationInput = {
    percent?: IntFieldUpdateOperationsInput | number
    buyDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    buyPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    sellPrice?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    stockId?: StringFieldUpdateOperationsInput | string
    percent?: IntFieldUpdateOperationsInput | number
    buyDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    strategyId?: IntFieldUpdateOperationsInput | number
    buyPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    sellPrice?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type StockCreateInput = {
    ticker: string
    transactions?: TransactionCreateNestedManyWithoutStockInput
    pricePoints?: PricePointCreateNestedManyWithoutStockInput
    currentPrice?: number
  }

  export type StockUncheckedCreateInput = {
    ticker: string
    transactions?: TransactionUncheckedCreateNestedManyWithoutStockInput
    pricePoints?: PricePointUncheckedCreateNestedManyWithoutStockInput
    currentPrice?: number
  }

  export type StockUpdateInput = {
    ticker?: StringFieldUpdateOperationsInput | string
    transactions?: TransactionUpdateManyWithoutStockNestedInput
    pricePoints?: PricePointUpdateManyWithoutStockNestedInput
    currentPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type StockUncheckedUpdateInput = {
    ticker?: StringFieldUpdateOperationsInput | string
    transactions?: TransactionUncheckedUpdateManyWithoutStockNestedInput
    pricePoints?: PricePointUncheckedUpdateManyWithoutStockNestedInput
    currentPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type StockCreateManyInput = {
    ticker: string
    currentPrice?: number
  }

  export type StockUpdateManyMutationInput = {
    ticker?: StringFieldUpdateOperationsInput | string
    currentPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type StockUncheckedUpdateManyInput = {
    ticker?: StringFieldUpdateOperationsInput | string
    currentPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type PricePointCreateInput = {
    price: number
    dateTime: number
    stock: StockCreateNestedOneWithoutPricePointsInput
  }

  export type PricePointUncheckedCreateInput = {
    price: number
    dateTime: number
    stockId: string
  }

  export type PricePointUpdateInput = {
    price?: FloatFieldUpdateOperationsInput | number
    dateTime?: FloatFieldUpdateOperationsInput | number
    stock?: StockUpdateOneRequiredWithoutPricePointsNestedInput
  }

  export type PricePointUncheckedUpdateInput = {
    price?: FloatFieldUpdateOperationsInput | number
    dateTime?: FloatFieldUpdateOperationsInput | number
    stockId?: StringFieldUpdateOperationsInput | string
  }

  export type PricePointCreateManyInput = {
    price: number
    dateTime: number
    stockId: string
  }

  export type PricePointUpdateManyMutationInput = {
    price?: FloatFieldUpdateOperationsInput | number
    dateTime?: FloatFieldUpdateOperationsInput | number
  }

  export type PricePointUncheckedUpdateManyInput = {
    price?: FloatFieldUpdateOperationsInput | number
    dateTime?: FloatFieldUpdateOperationsInput | number
    stockId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type StrategyListRelationFilter = {
    every?: StrategyWhereInput
    some?: StrategyWhereInput
    none?: StrategyWhereInput
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StrategyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StrategyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
  }

  export type StrategyAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StrategyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
  }

  export type StrategyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    ownerId?: SortOrder
  }

  export type StrategySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StockRelationFilter = {
    is?: StockWhereInput
    isNot?: StockWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type StrategyRelationFilter = {
    is?: StrategyWhereInput
    isNot?: StrategyWhereInput
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    stockId?: SortOrder
    percent?: SortOrder
    buyDateTime?: SortOrder
    sellDateTime?: SortOrder
    strategyId?: SortOrder
    buyPrice?: SortOrder
    sellPrice?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    id?: SortOrder
    percent?: SortOrder
    strategyId?: SortOrder
    buyPrice?: SortOrder
    sellPrice?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    stockId?: SortOrder
    percent?: SortOrder
    buyDateTime?: SortOrder
    sellDateTime?: SortOrder
    strategyId?: SortOrder
    buyPrice?: SortOrder
    sellPrice?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    stockId?: SortOrder
    percent?: SortOrder
    buyDateTime?: SortOrder
    sellDateTime?: SortOrder
    strategyId?: SortOrder
    buyPrice?: SortOrder
    sellPrice?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    id?: SortOrder
    percent?: SortOrder
    strategyId?: SortOrder
    buyPrice?: SortOrder
    sellPrice?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type PricePointListRelationFilter = {
    every?: PricePointWhereInput
    some?: PricePointWhereInput
    none?: PricePointWhereInput
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type PricePointOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StockCountOrderByAggregateInput = {
    ticker?: SortOrder
    currentPrice?: SortOrder
  }

  export type StockAvgOrderByAggregateInput = {
    currentPrice?: SortOrder
  }

  export type StockMaxOrderByAggregateInput = {
    ticker?: SortOrder
    currentPrice?: SortOrder
  }

  export type StockMinOrderByAggregateInput = {
    ticker?: SortOrder
    currentPrice?: SortOrder
  }

  export type StockSumOrderByAggregateInput = {
    currentPrice?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type PricePointDateTimeStockIdCompoundUniqueInput = {
    dateTime: number
    stockId: string
  }

  export type PricePointCountOrderByAggregateInput = {
    price?: SortOrder
    dateTime?: SortOrder
    stockId?: SortOrder
  }

  export type PricePointAvgOrderByAggregateInput = {
    price?: SortOrder
    dateTime?: SortOrder
  }

  export type PricePointMaxOrderByAggregateInput = {
    price?: SortOrder
    dateTime?: SortOrder
    stockId?: SortOrder
  }

  export type PricePointMinOrderByAggregateInput = {
    price?: SortOrder
    dateTime?: SortOrder
    stockId?: SortOrder
  }

  export type PricePointSumOrderByAggregateInput = {
    price?: SortOrder
    dateTime?: SortOrder
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type StrategyCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<StrategyCreateWithoutOwnerInput>, Enumerable<StrategyUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<StrategyCreateOrConnectWithoutOwnerInput>
    createMany?: StrategyCreateManyOwnerInputEnvelope
    connect?: Enumerable<StrategyWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type StrategyUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<StrategyCreateWithoutOwnerInput>, Enumerable<StrategyUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<StrategyCreateOrConnectWithoutOwnerInput>
    createMany?: StrategyCreateManyOwnerInputEnvelope
    connect?: Enumerable<StrategyWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type StrategyUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<StrategyCreateWithoutOwnerInput>, Enumerable<StrategyUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<StrategyCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<StrategyUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: StrategyCreateManyOwnerInputEnvelope
    set?: Enumerable<StrategyWhereUniqueInput>
    disconnect?: Enumerable<StrategyWhereUniqueInput>
    delete?: Enumerable<StrategyWhereUniqueInput>
    connect?: Enumerable<StrategyWhereUniqueInput>
    update?: Enumerable<StrategyUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<StrategyUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<StrategyScalarWhereInput>
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type StrategyUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<Enumerable<StrategyCreateWithoutOwnerInput>, Enumerable<StrategyUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<StrategyCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<StrategyUpsertWithWhereUniqueWithoutOwnerInput>
    createMany?: StrategyCreateManyOwnerInputEnvelope
    set?: Enumerable<StrategyWhereUniqueInput>
    disconnect?: Enumerable<StrategyWhereUniqueInput>
    delete?: Enumerable<StrategyWhereUniqueInput>
    connect?: Enumerable<StrategyWhereUniqueInput>
    update?: Enumerable<StrategyUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<StrategyUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<StrategyScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutStrategiesInput = {
    create?: XOR<UserCreateWithoutStrategiesInput, UserUncheckedCreateWithoutStrategiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStrategiesInput
    connect?: UserWhereUniqueInput
  }

  export type TransactionCreateNestedManyWithoutStrategyInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutStrategyInput>, Enumerable<TransactionUncheckedCreateWithoutStrategyInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutStrategyInput>
    createMany?: TransactionCreateManyStrategyInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type TransactionUncheckedCreateNestedManyWithoutStrategyInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutStrategyInput>, Enumerable<TransactionUncheckedCreateWithoutStrategyInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutStrategyInput>
    createMany?: TransactionCreateManyStrategyInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutStrategiesNestedInput = {
    create?: XOR<UserCreateWithoutStrategiesInput, UserUncheckedCreateWithoutStrategiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStrategiesInput
    upsert?: UserUpsertWithoutStrategiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutStrategiesInput, UserUncheckedUpdateWithoutStrategiesInput>
  }

  export type TransactionUpdateManyWithoutStrategyNestedInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutStrategyInput>, Enumerable<TransactionUncheckedCreateWithoutStrategyInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutStrategyInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutStrategyInput>
    createMany?: TransactionCreateManyStrategyInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutStrategyInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutStrategyInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TransactionUncheckedUpdateManyWithoutStrategyNestedInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutStrategyInput>, Enumerable<TransactionUncheckedCreateWithoutStrategyInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutStrategyInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutStrategyInput>
    createMany?: TransactionCreateManyStrategyInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutStrategyInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutStrategyInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type StockCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<StockCreateWithoutTransactionsInput, StockUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: StockCreateOrConnectWithoutTransactionsInput
    connect?: StockWhereUniqueInput
  }

  export type StrategyCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<StrategyCreateWithoutTransactionsInput, StrategyUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: StrategyCreateOrConnectWithoutTransactionsInput
    connect?: StrategyWhereUniqueInput
  }

  export type StockUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<StockCreateWithoutTransactionsInput, StockUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: StockCreateOrConnectWithoutTransactionsInput
    upsert?: StockUpsertWithoutTransactionsInput
    connect?: StockWhereUniqueInput
    update?: XOR<StockUpdateWithoutTransactionsInput, StockUncheckedUpdateWithoutTransactionsInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type StrategyUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<StrategyCreateWithoutTransactionsInput, StrategyUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: StrategyCreateOrConnectWithoutTransactionsInput
    upsert?: StrategyUpsertWithoutTransactionsInput
    connect?: StrategyWhereUniqueInput
    update?: XOR<StrategyUpdateWithoutTransactionsInput, StrategyUncheckedUpdateWithoutTransactionsInput>
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TransactionCreateNestedManyWithoutStockInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutStockInput>, Enumerable<TransactionUncheckedCreateWithoutStockInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutStockInput>
    createMany?: TransactionCreateManyStockInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type PricePointCreateNestedManyWithoutStockInput = {
    create?: XOR<Enumerable<PricePointCreateWithoutStockInput>, Enumerable<PricePointUncheckedCreateWithoutStockInput>>
    connectOrCreate?: Enumerable<PricePointCreateOrConnectWithoutStockInput>
    createMany?: PricePointCreateManyStockInputEnvelope
    connect?: Enumerable<PricePointWhereUniqueInput>
  }

  export type TransactionUncheckedCreateNestedManyWithoutStockInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutStockInput>, Enumerable<TransactionUncheckedCreateWithoutStockInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutStockInput>
    createMany?: TransactionCreateManyStockInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type PricePointUncheckedCreateNestedManyWithoutStockInput = {
    create?: XOR<Enumerable<PricePointCreateWithoutStockInput>, Enumerable<PricePointUncheckedCreateWithoutStockInput>>
    connectOrCreate?: Enumerable<PricePointCreateOrConnectWithoutStockInput>
    createMany?: PricePointCreateManyStockInputEnvelope
    connect?: Enumerable<PricePointWhereUniqueInput>
  }

  export type TransactionUpdateManyWithoutStockNestedInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutStockInput>, Enumerable<TransactionUncheckedCreateWithoutStockInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutStockInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutStockInput>
    createMany?: TransactionCreateManyStockInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutStockInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutStockInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type PricePointUpdateManyWithoutStockNestedInput = {
    create?: XOR<Enumerable<PricePointCreateWithoutStockInput>, Enumerable<PricePointUncheckedCreateWithoutStockInput>>
    connectOrCreate?: Enumerable<PricePointCreateOrConnectWithoutStockInput>
    upsert?: Enumerable<PricePointUpsertWithWhereUniqueWithoutStockInput>
    createMany?: PricePointCreateManyStockInputEnvelope
    set?: Enumerable<PricePointWhereUniqueInput>
    disconnect?: Enumerable<PricePointWhereUniqueInput>
    delete?: Enumerable<PricePointWhereUniqueInput>
    connect?: Enumerable<PricePointWhereUniqueInput>
    update?: Enumerable<PricePointUpdateWithWhereUniqueWithoutStockInput>
    updateMany?: Enumerable<PricePointUpdateManyWithWhereWithoutStockInput>
    deleteMany?: Enumerable<PricePointScalarWhereInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TransactionUncheckedUpdateManyWithoutStockNestedInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutStockInput>, Enumerable<TransactionUncheckedCreateWithoutStockInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutStockInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutStockInput>
    createMany?: TransactionCreateManyStockInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutStockInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutStockInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type PricePointUncheckedUpdateManyWithoutStockNestedInput = {
    create?: XOR<Enumerable<PricePointCreateWithoutStockInput>, Enumerable<PricePointUncheckedCreateWithoutStockInput>>
    connectOrCreate?: Enumerable<PricePointCreateOrConnectWithoutStockInput>
    upsert?: Enumerable<PricePointUpsertWithWhereUniqueWithoutStockInput>
    createMany?: PricePointCreateManyStockInputEnvelope
    set?: Enumerable<PricePointWhereUniqueInput>
    disconnect?: Enumerable<PricePointWhereUniqueInput>
    delete?: Enumerable<PricePointWhereUniqueInput>
    connect?: Enumerable<PricePointWhereUniqueInput>
    update?: Enumerable<PricePointUpdateWithWhereUniqueWithoutStockInput>
    updateMany?: Enumerable<PricePointUpdateManyWithWhereWithoutStockInput>
    deleteMany?: Enumerable<PricePointScalarWhereInput>
  }

  export type StockCreateNestedOneWithoutPricePointsInput = {
    create?: XOR<StockCreateWithoutPricePointsInput, StockUncheckedCreateWithoutPricePointsInput>
    connectOrCreate?: StockCreateOrConnectWithoutPricePointsInput
    connect?: StockWhereUniqueInput
  }

  export type StockUpdateOneRequiredWithoutPricePointsNestedInput = {
    create?: XOR<StockCreateWithoutPricePointsInput, StockUncheckedCreateWithoutPricePointsInput>
    connectOrCreate?: StockCreateOrConnectWithoutPricePointsInput
    upsert?: StockUpsertWithoutPricePointsInput
    connect?: StockWhereUniqueInput
    update?: XOR<StockUpdateWithoutPricePointsInput, StockUncheckedUpdateWithoutPricePointsInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: Enumerable<SessionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type StrategyCreateWithoutOwnerInput = {
    name: string
    transactions?: TransactionCreateNestedManyWithoutStrategyInput
  }

  export type StrategyUncheckedCreateWithoutOwnerInput = {
    id?: number
    name: string
    transactions?: TransactionUncheckedCreateNestedManyWithoutStrategyInput
  }

  export type StrategyCreateOrConnectWithoutOwnerInput = {
    where: StrategyWhereUniqueInput
    create: XOR<StrategyCreateWithoutOwnerInput, StrategyUncheckedCreateWithoutOwnerInput>
  }

  export type StrategyCreateManyOwnerInputEnvelope = {
    data: Enumerable<StrategyCreateManyOwnerInput>
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutSessionsInput>
  }

  export type SessionScalarWhereInput = {
    AND?: Enumerable<SessionScalarWhereInput>
    OR?: Enumerable<SessionScalarWhereInput>
    NOT?: Enumerable<SessionScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
  }

  export type StrategyUpsertWithWhereUniqueWithoutOwnerInput = {
    where: StrategyWhereUniqueInput
    update: XOR<StrategyUpdateWithoutOwnerInput, StrategyUncheckedUpdateWithoutOwnerInput>
    create: XOR<StrategyCreateWithoutOwnerInput, StrategyUncheckedCreateWithoutOwnerInput>
  }

  export type StrategyUpdateWithWhereUniqueWithoutOwnerInput = {
    where: StrategyWhereUniqueInput
    data: XOR<StrategyUpdateWithoutOwnerInput, StrategyUncheckedUpdateWithoutOwnerInput>
  }

  export type StrategyUpdateManyWithWhereWithoutOwnerInput = {
    where: StrategyScalarWhereInput
    data: XOR<StrategyUpdateManyMutationInput, StrategyUncheckedUpdateManyWithoutStrategiesInput>
  }

  export type StrategyScalarWhereInput = {
    AND?: Enumerable<StrategyScalarWhereInput>
    OR?: Enumerable<StrategyScalarWhereInput>
    NOT?: Enumerable<StrategyScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    ownerId?: StringFilter | string
  }

  export type UserCreateWithoutSessionsInput = {
    username: string
    email: string
    password: string
    strategies?: StrategyCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    username: string
    email: string
    password: string
    strategies?: StrategyUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    strategies?: StrategyUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    strategies?: StrategyUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type UserCreateWithoutStrategiesInput = {
    username: string
    email: string
    password: string
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStrategiesInput = {
    username: string
    email: string
    password: string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStrategiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStrategiesInput, UserUncheckedCreateWithoutStrategiesInput>
  }

  export type TransactionCreateWithoutStrategyInput = {
    stock: StockCreateNestedOneWithoutTransactionsInput
    percent: number
    buyDateTime: Date | string
    sellDateTime: Date | string
    buyPrice?: number | null
    sellPrice?: number | null
  }

  export type TransactionUncheckedCreateWithoutStrategyInput = {
    id?: number
    stockId: string
    percent: number
    buyDateTime: Date | string
    sellDateTime: Date | string
    buyPrice?: number | null
    sellPrice?: number | null
  }

  export type TransactionCreateOrConnectWithoutStrategyInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutStrategyInput, TransactionUncheckedCreateWithoutStrategyInput>
  }

  export type TransactionCreateManyStrategyInputEnvelope = {
    data: Enumerable<TransactionCreateManyStrategyInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutStrategiesInput = {
    update: XOR<UserUpdateWithoutStrategiesInput, UserUncheckedUpdateWithoutStrategiesInput>
    create: XOR<UserCreateWithoutStrategiesInput, UserUncheckedCreateWithoutStrategiesInput>
  }

  export type UserUpdateWithoutStrategiesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStrategiesInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TransactionUpsertWithWhereUniqueWithoutStrategyInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutStrategyInput, TransactionUncheckedUpdateWithoutStrategyInput>
    create: XOR<TransactionCreateWithoutStrategyInput, TransactionUncheckedCreateWithoutStrategyInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutStrategyInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutStrategyInput, TransactionUncheckedUpdateWithoutStrategyInput>
  }

  export type TransactionUpdateManyWithWhereWithoutStrategyInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutTransactionsInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: Enumerable<TransactionScalarWhereInput>
    OR?: Enumerable<TransactionScalarWhereInput>
    NOT?: Enumerable<TransactionScalarWhereInput>
    id?: IntFilter | number
    stockId?: StringFilter | string
    percent?: IntFilter | number
    buyDateTime?: DateTimeFilter | Date | string
    sellDateTime?: DateTimeFilter | Date | string
    strategyId?: IntFilter | number
    buyPrice?: FloatNullableFilter | number | null
    sellPrice?: FloatNullableFilter | number | null
  }

  export type StockCreateWithoutTransactionsInput = {
    ticker: string
    pricePoints?: PricePointCreateNestedManyWithoutStockInput
    currentPrice?: number
  }

  export type StockUncheckedCreateWithoutTransactionsInput = {
    ticker: string
    pricePoints?: PricePointUncheckedCreateNestedManyWithoutStockInput
    currentPrice?: number
  }

  export type StockCreateOrConnectWithoutTransactionsInput = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutTransactionsInput, StockUncheckedCreateWithoutTransactionsInput>
  }

  export type StrategyCreateWithoutTransactionsInput = {
    name: string
    owner: UserCreateNestedOneWithoutStrategiesInput
  }

  export type StrategyUncheckedCreateWithoutTransactionsInput = {
    id?: number
    name: string
    ownerId: string
  }

  export type StrategyCreateOrConnectWithoutTransactionsInput = {
    where: StrategyWhereUniqueInput
    create: XOR<StrategyCreateWithoutTransactionsInput, StrategyUncheckedCreateWithoutTransactionsInput>
  }

  export type StockUpsertWithoutTransactionsInput = {
    update: XOR<StockUpdateWithoutTransactionsInput, StockUncheckedUpdateWithoutTransactionsInput>
    create: XOR<StockCreateWithoutTransactionsInput, StockUncheckedCreateWithoutTransactionsInput>
  }

  export type StockUpdateWithoutTransactionsInput = {
    ticker?: StringFieldUpdateOperationsInput | string
    pricePoints?: PricePointUpdateManyWithoutStockNestedInput
    currentPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type StockUncheckedUpdateWithoutTransactionsInput = {
    ticker?: StringFieldUpdateOperationsInput | string
    pricePoints?: PricePointUncheckedUpdateManyWithoutStockNestedInput
    currentPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type StrategyUpsertWithoutTransactionsInput = {
    update: XOR<StrategyUpdateWithoutTransactionsInput, StrategyUncheckedUpdateWithoutTransactionsInput>
    create: XOR<StrategyCreateWithoutTransactionsInput, StrategyUncheckedCreateWithoutTransactionsInput>
  }

  export type StrategyUpdateWithoutTransactionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    owner?: UserUpdateOneRequiredWithoutStrategiesNestedInput
  }

  export type StrategyUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    ownerId?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionCreateWithoutStockInput = {
    percent: number
    buyDateTime: Date | string
    sellDateTime: Date | string
    strategy: StrategyCreateNestedOneWithoutTransactionsInput
    buyPrice?: number | null
    sellPrice?: number | null
  }

  export type TransactionUncheckedCreateWithoutStockInput = {
    id?: number
    percent: number
    buyDateTime: Date | string
    sellDateTime: Date | string
    strategyId: number
    buyPrice?: number | null
    sellPrice?: number | null
  }

  export type TransactionCreateOrConnectWithoutStockInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutStockInput, TransactionUncheckedCreateWithoutStockInput>
  }

  export type TransactionCreateManyStockInputEnvelope = {
    data: Enumerable<TransactionCreateManyStockInput>
    skipDuplicates?: boolean
  }

  export type PricePointCreateWithoutStockInput = {
    price: number
    dateTime: number
  }

  export type PricePointUncheckedCreateWithoutStockInput = {
    price: number
    dateTime: number
  }

  export type PricePointCreateOrConnectWithoutStockInput = {
    where: PricePointWhereUniqueInput
    create: XOR<PricePointCreateWithoutStockInput, PricePointUncheckedCreateWithoutStockInput>
  }

  export type PricePointCreateManyStockInputEnvelope = {
    data: Enumerable<PricePointCreateManyStockInput>
    skipDuplicates?: boolean
  }

  export type TransactionUpsertWithWhereUniqueWithoutStockInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutStockInput, TransactionUncheckedUpdateWithoutStockInput>
    create: XOR<TransactionCreateWithoutStockInput, TransactionUncheckedCreateWithoutStockInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutStockInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutStockInput, TransactionUncheckedUpdateWithoutStockInput>
  }

  export type TransactionUpdateManyWithWhereWithoutStockInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutTransactionsInput>
  }

  export type PricePointUpsertWithWhereUniqueWithoutStockInput = {
    where: PricePointWhereUniqueInput
    update: XOR<PricePointUpdateWithoutStockInput, PricePointUncheckedUpdateWithoutStockInput>
    create: XOR<PricePointCreateWithoutStockInput, PricePointUncheckedCreateWithoutStockInput>
  }

  export type PricePointUpdateWithWhereUniqueWithoutStockInput = {
    where: PricePointWhereUniqueInput
    data: XOR<PricePointUpdateWithoutStockInput, PricePointUncheckedUpdateWithoutStockInput>
  }

  export type PricePointUpdateManyWithWhereWithoutStockInput = {
    where: PricePointScalarWhereInput
    data: XOR<PricePointUpdateManyMutationInput, PricePointUncheckedUpdateManyWithoutPricePointsInput>
  }

  export type PricePointScalarWhereInput = {
    AND?: Enumerable<PricePointScalarWhereInput>
    OR?: Enumerable<PricePointScalarWhereInput>
    NOT?: Enumerable<PricePointScalarWhereInput>
    price?: FloatFilter | number
    dateTime?: FloatFilter | number
    stockId?: StringFilter | string
  }

  export type StockCreateWithoutPricePointsInput = {
    ticker: string
    transactions?: TransactionCreateNestedManyWithoutStockInput
    currentPrice?: number
  }

  export type StockUncheckedCreateWithoutPricePointsInput = {
    ticker: string
    transactions?: TransactionUncheckedCreateNestedManyWithoutStockInput
    currentPrice?: number
  }

  export type StockCreateOrConnectWithoutPricePointsInput = {
    where: StockWhereUniqueInput
    create: XOR<StockCreateWithoutPricePointsInput, StockUncheckedCreateWithoutPricePointsInput>
  }

  export type StockUpsertWithoutPricePointsInput = {
    update: XOR<StockUpdateWithoutPricePointsInput, StockUncheckedUpdateWithoutPricePointsInput>
    create: XOR<StockCreateWithoutPricePointsInput, StockUncheckedCreateWithoutPricePointsInput>
  }

  export type StockUpdateWithoutPricePointsInput = {
    ticker?: StringFieldUpdateOperationsInput | string
    transactions?: TransactionUpdateManyWithoutStockNestedInput
    currentPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type StockUncheckedUpdateWithoutPricePointsInput = {
    ticker?: StringFieldUpdateOperationsInput | string
    transactions?: TransactionUncheckedUpdateManyWithoutStockNestedInput
    currentPrice?: FloatFieldUpdateOperationsInput | number
  }

  export type SessionCreateManyUserInput = {
    id?: string
  }

  export type StrategyCreateManyOwnerInput = {
    id?: number
    name: string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUncheckedUpdateManyWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type StrategyUpdateWithoutOwnerInput = {
    name?: StringFieldUpdateOperationsInput | string
    transactions?: TransactionUpdateManyWithoutStrategyNestedInput
  }

  export type StrategyUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    transactions?: TransactionUncheckedUpdateManyWithoutStrategyNestedInput
  }

  export type StrategyUncheckedUpdateManyWithoutStrategiesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionCreateManyStrategyInput = {
    id?: number
    stockId: string
    percent: number
    buyDateTime: Date | string
    sellDateTime: Date | string
    buyPrice?: number | null
    sellPrice?: number | null
  }

  export type TransactionUpdateWithoutStrategyInput = {
    stock?: StockUpdateOneRequiredWithoutTransactionsNestedInput
    percent?: IntFieldUpdateOperationsInput | number
    buyDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    buyPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    sellPrice?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type TransactionUncheckedUpdateWithoutStrategyInput = {
    id?: IntFieldUpdateOperationsInput | number
    stockId?: StringFieldUpdateOperationsInput | string
    percent?: IntFieldUpdateOperationsInput | number
    buyDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    buyPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    sellPrice?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type TransactionUncheckedUpdateManyWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    stockId?: StringFieldUpdateOperationsInput | string
    percent?: IntFieldUpdateOperationsInput | number
    buyDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    buyPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    sellPrice?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type TransactionCreateManyStockInput = {
    id?: number
    percent: number
    buyDateTime: Date | string
    sellDateTime: Date | string
    strategyId: number
    buyPrice?: number | null
    sellPrice?: number | null
  }

  export type PricePointCreateManyStockInput = {
    price: number
    dateTime: number
  }

  export type TransactionUpdateWithoutStockInput = {
    percent?: IntFieldUpdateOperationsInput | number
    buyDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    strategy?: StrategyUpdateOneRequiredWithoutTransactionsNestedInput
    buyPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    sellPrice?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type TransactionUncheckedUpdateWithoutStockInput = {
    id?: IntFieldUpdateOperationsInput | number
    percent?: IntFieldUpdateOperationsInput | number
    buyDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    sellDateTime?: DateTimeFieldUpdateOperationsInput | Date | string
    strategyId?: IntFieldUpdateOperationsInput | number
    buyPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    sellPrice?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type PricePointUpdateWithoutStockInput = {
    price?: FloatFieldUpdateOperationsInput | number
    dateTime?: FloatFieldUpdateOperationsInput | number
  }

  export type PricePointUncheckedUpdateWithoutStockInput = {
    price?: FloatFieldUpdateOperationsInput | number
    dateTime?: FloatFieldUpdateOperationsInput | number
  }

  export type PricePointUncheckedUpdateManyWithoutPricePointsInput = {
    price?: FloatFieldUpdateOperationsInput | number
    dateTime?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}